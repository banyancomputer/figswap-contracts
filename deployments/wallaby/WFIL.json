{
  "address": "0x281Ab66e358b4e6A444286964A9D74b0508A1167",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x041ad136a036903ca7a0d0ae89736f507f75c80f8e0e55c3175ebacf9459112d",
  "receipt": {
    "to": null,
    "from": "0xA95e1567e73A126FC58cc078357fb0A13845AE0C",
    "contractAddress": "0x281Ab66e358b4e6A444286964A9D74b0508A1167",
    "transactionIndex": 0,
    "gasUsed": "34199670",
    "logsBloom": "0x00",
    "blockHash": "0x3dc05354a27420e7776bc0870a29c14890698ae786e6a1697a8c4b95fb19ed6f",
    "transactionHash": "0x041ad136a036903ca7a0d0ae89736f507f75c80f8e0e55c3175ebacf9459112d",
    "logs": [],
    "blockNumber": 4989,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "223aeddccad6fe5d3ba9992203559953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WFIL.sol\":\"WFIL\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363636363638323837363837\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        // emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5cd9f2f4c1e73123fb1c60fe22acfd9efd95e81f3433267516f5def1cdace3d0\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"},\"src/WFIL.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// from https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code\\n\\npragma solidity ^0.8.15;\\n\\nimport {ERC20} from \\\"lib/solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"lib/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\ncontract WFIL is ERC20(\\\"Wrapped Filecoin\\\", \\\"WFIL\\\", 18) {\\n    using SafeTransferLib for address;\\n\\n    event Deposit(address indexed from, uint256 amount);\\n\\n    event Withdrawal(address indexed to, uint256 amount);\\n\\n    function deposit() public payable virtual {\\n        _mint(msg.sender, msg.value);\\n\\n        // emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n\\n        msg.sender.safeTransferETH(amount);\\n    }\\n\\n    receive() external payable virtual {\\n        deposit();\\n    }\\n}\\n\",\"keccak256\":\"0x73586771dc3e7fd5da2c091aea12c671e5424a227c91888fb11a879a5acec575\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040518060400160405280601081526020017f577261707065642046696c65636f696e000000000000000000000000000000008152506040518060400160405280600481526020017f5746494c0000000000000000000000000000000000000000000000000000000081525060128260009081620000919190620003e4565b508160019081620000a39190620003e4565b508060ff1660808160ff16815250504660a08181525050620000ca620000da60201b60201c565b60c0818152505050505062000661565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516200010e91906200057a565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646306040516020016200014f95949392919062000604565b60405160208183030381529060405280519060200120905090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001ec57607f821691505b602082108103620002025762000201620001a4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200026c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200022d565b6200027886836200022d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002c5620002bf620002b98462000290565b6200029a565b62000290565b9050919050565b6000819050919050565b620002e183620002a4565b620002f9620002f082620002cc565b8484546200023a565b825550505050565b600090565b6200031062000301565b6200031d818484620002d6565b505050565b5b8181101562000345576200033960008262000306565b60018101905062000323565b5050565b601f82111562000394576200035e8162000208565b62000369846200021d565b8101602085101562000379578190505b6200039162000388856200021d565b83018262000322565b50505b505050565b600082821c905092915050565b6000620003b96000198460080262000399565b1980831691505092915050565b6000620003d48383620003a6565b9150826002028217905092915050565b620003ef826200016a565b67ffffffffffffffff8111156200040b576200040a62000175565b5b620004178254620001d3565b6200042482828562000349565b600060209050601f8311600181146200045c576000841562000447578287015190505b620004538582620003c6565b865550620004c3565b601f1984166200046c8662000208565b60005b8281101562000496578489015182556001820191506020850194506020810190506200046f565b86831015620004b65784890151620004b2601f891682620003a6565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60008190508160005260206000209050919050565b60008154620004fa81620001d3565b620005068186620004cb565b945060018216600081146200052457600181146200053a5762000571565b60ff198316865281151582028601935062000571565b6200054585620004d6565b60005b83811015620005695781548189015260018201915060208101905062000548565b838801955050505b50505092915050565b6000620005888284620004eb565b915081905092915050565b6000819050919050565b620005a88162000593565b82525050565b620005b98162000290565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005ec82620005bf565b9050919050565b620005fe81620005df565b82525050565b600060a0820190506200061b60008301886200059d565b6200062a60208301876200059d565b6200063960408301866200059d565b620006486060830185620005ae565b620006576080830184620005f3565b9695505050505050565b60805160a05160c0516118ca6200069160003960006108520152600061081e015260006107f801526118ca6000f3fe6080604052600436106100e15760003560e01c806370a082311161007f578063a9059cbb11610059578063a9059cbb146102e9578063d0e30db014610326578063d505accf14610330578063dd62ed3e14610359576100f0565b806370a08231146102445780637ecebe001461028157806395d89b41146102be576100f0565b806323b872dd116100bb57806323b872dd146101885780632e1a7d4d146101c5578063313ce567146101ee5780633644e51514610219576100f0565b806306fdde03146100f5578063095ea7b31461012057806318160ddd1461015d576100f0565b366100f0576100ee610396565b005b600080fd5b34801561010157600080fd5b5061010a6103a2565b6040516101179190611019565b60405180910390f35b34801561012c57600080fd5b50610147600480360381019061014291906110d4565b610430565b604051610154919061112f565b60405180910390f35b34801561016957600080fd5b50610172610522565b60405161017f9190611159565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa9190611174565b610528565b6040516101bc919061112f565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e791906111c7565b610772565b005b3480156101fa57600080fd5b506102036107f6565b6040516102109190611210565b60405180910390f35b34801561022557600080fd5b5061022e61081a565b60405161023b9190611244565b60405180910390f35b34801561025057600080fd5b5061026b6004803603810190610266919061125f565b610877565b6040516102789190611159565b60405180910390f35b34801561028d57600080fd5b506102a860048036038101906102a3919061125f565b61088f565b6040516102b59190611159565b60405180910390f35b3480156102ca57600080fd5b506102d36108a7565b6040516102e09190611019565b60405180910390f35b3480156102f557600080fd5b50610310600480360381019061030b91906110d4565b610935565b60405161031d919061112f565b60405180910390f35b61032e610396565b005b34801561033c57600080fd5b50610357600480360381019061035291906112e4565b610a49565b005b34801561036557600080fd5b50610380600480360381019061037b9190611386565b610d42565b60405161038d9190611159565b60405180910390f35b6103a03334610d67565b565b600080546103af906113f5565b80601f01602080910402602001604051908101604052809291908181526020018280546103db906113f5565b80156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105109190611159565b60405180910390a36001905092915050565b60025481565b600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461065e5782816105dd9190611455565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106ad9190611455565b9250508190555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161075e9190611159565b60405180910390a360019150509392505050565b61077c3382610dd1565b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040516107c29190611159565b60405180910390a26107f3813373ffffffffffffffffffffffffffffffffffffffff16610ea190919063ffffffff16565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000046146108505761084b610ef4565b610872565b7f00000000000000000000000000000000000000000000000000000000000000005b905090565b60036020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b600180546108b4906113f5565b80601f01602080910402602001604051908101604052809291908181526020018280546108e0906113f5565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109869190611455565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a379190611159565b60405180910390a36001905092915050565b42841015610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a83906114d5565b60405180910390fd5b60006001610a9861081a565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558b604051602001610b2096959493929190611504565b60405160208183030381529060405280519060200120604051602001610b479291906115dd565b6040516020818303038152906040528051906020012085858560405160008152602001604052604051610b7d9493929190611614565b6020604051602081039080840390855afa158015610b9f573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610c1357508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c49906116a5565b60405180910390fd5b85600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92587604051610d319190611159565b60405180910390a350505050505050565b6004602052816000526040600020602052806000526040600020600091509150505481565b8060026000828254610d7991906116c5565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e209190611455565b9250508190555080600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e959190611159565b60405180910390a35050565b600080600080600085875af1905080610eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee690611767565b60405180910390fd5b505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051610f26919061182a565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc64630604051602001610f65959493929190611841565b60405160208183030381529060405280519060200120905090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fba578082015181840152602081019050610f9f565b83811115610fc9576000848401525b50505050565b6000601f19601f8301169050919050565b6000610feb82610f80565b610ff58185610f8b565b9350611005818560208601610f9c565b61100e81610fcf565b840191505092915050565b600060208201905081810360008301526110338184610fe0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061106b82611040565b9050919050565b61107b81611060565b811461108657600080fd5b50565b60008135905061109881611072565b92915050565b6000819050919050565b6110b18161109e565b81146110bc57600080fd5b50565b6000813590506110ce816110a8565b92915050565b600080604083850312156110eb576110ea61103b565b5b60006110f985828601611089565b925050602061110a858286016110bf565b9150509250929050565b60008115159050919050565b61112981611114565b82525050565b60006020820190506111446000830184611120565b92915050565b6111538161109e565b82525050565b600060208201905061116e600083018461114a565b92915050565b60008060006060848603121561118d5761118c61103b565b5b600061119b86828701611089565b93505060206111ac86828701611089565b92505060406111bd868287016110bf565b9150509250925092565b6000602082840312156111dd576111dc61103b565b5b60006111eb848285016110bf565b91505092915050565b600060ff82169050919050565b61120a816111f4565b82525050565b60006020820190506112256000830184611201565b92915050565b6000819050919050565b61123e8161122b565b82525050565b60006020820190506112596000830184611235565b92915050565b6000602082840312156112755761127461103b565b5b600061128384828501611089565b91505092915050565b611295816111f4565b81146112a057600080fd5b50565b6000813590506112b28161128c565b92915050565b6112c18161122b565b81146112cc57600080fd5b50565b6000813590506112de816112b8565b92915050565b600080600080600080600060e0888a0312156113035761130261103b565b5b60006113118a828b01611089565b97505060206113228a828b01611089565b96505060406113338a828b016110bf565b95505060606113448a828b016110bf565b94505060806113558a828b016112a3565b93505060a06113668a828b016112cf565b92505060c06113778a828b016112cf565b91505092959891949750929550565b6000806040838503121561139d5761139c61103b565b5b60006113ab85828601611089565b92505060206113bc85828601611089565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061140d57607f821691505b6020821081036114205761141f6113c6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114608261109e565b915061146b8361109e565b92508282101561147e5761147d611426565b5b828203905092915050565b7f5045524d49545f444541444c494e455f45585049524544000000000000000000600082015250565b60006114bf601783610f8b565b91506114ca82611489565b602082019050919050565b600060208201905081810360008301526114ee816114b2565b9050919050565b6114fe81611060565b82525050565b600060c0820190506115196000830189611235565b61152660208301886114f5565b61153360408301876114f5565b611540606083018661114a565b61154d608083018561114a565b61155a60a083018461114a565b979650505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006115a6600283611565565b91506115b182611570565b600282019050919050565b6000819050919050565b6115d76115d28261122b565b6115bc565b82525050565b60006115e882611599565b91506115f482856115c6565b60208201915061160482846115c6565b6020820191508190509392505050565b60006080820190506116296000830187611235565b6116366020830186611201565b6116436040830185611235565b6116506060830184611235565b95945050505050565b7f494e56414c49445f5349474e4552000000000000000000000000000000000000600082015250565b600061168f600e83610f8b565b915061169a82611659565b602082019050919050565b600060208201905081810360008301526116be81611682565b9050919050565b60006116d08261109e565b91506116db8361109e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117105761170f611426565b5b828201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000611751601383610f8b565b915061175c8261171b565b602082019050919050565b6000602082019050818103600083015261178081611744565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546117b4816113f5565b6117be8186611787565b945060018216600081146117d957600181146117ee57611821565b60ff1983168652811515820286019350611821565b6117f785611792565b60005b83811015611819578154818901526001820191506020810190506117fa565b838801955050505b50505092915050565b600061183682846117a7565b915081905092915050565b600060a0820190506118566000830188611235565b6118636020830187611235565b6118706040830186611235565b61187d606083018561114a565b61188a60808301846114f5565b969550505050505056fea26469706673582212203fb1b7135a6cd0c36f0f125c4312ee251b45c02c61d5295dfaf5fc67b3a34a8664736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c806370a082311161007f578063a9059cbb11610059578063a9059cbb146102e9578063d0e30db014610326578063d505accf14610330578063dd62ed3e14610359576100f0565b806370a08231146102445780637ecebe001461028157806395d89b41146102be576100f0565b806323b872dd116100bb57806323b872dd146101885780632e1a7d4d146101c5578063313ce567146101ee5780633644e51514610219576100f0565b806306fdde03146100f5578063095ea7b31461012057806318160ddd1461015d576100f0565b366100f0576100ee610396565b005b600080fd5b34801561010157600080fd5b5061010a6103a2565b6040516101179190611019565b60405180910390f35b34801561012c57600080fd5b50610147600480360381019061014291906110d4565b610430565b604051610154919061112f565b60405180910390f35b34801561016957600080fd5b50610172610522565b60405161017f9190611159565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa9190611174565b610528565b6040516101bc919061112f565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e791906111c7565b610772565b005b3480156101fa57600080fd5b506102036107f6565b6040516102109190611210565b60405180910390f35b34801561022557600080fd5b5061022e61081a565b60405161023b9190611244565b60405180910390f35b34801561025057600080fd5b5061026b6004803603810190610266919061125f565b610877565b6040516102789190611159565b60405180910390f35b34801561028d57600080fd5b506102a860048036038101906102a3919061125f565b61088f565b6040516102b59190611159565b60405180910390f35b3480156102ca57600080fd5b506102d36108a7565b6040516102e09190611019565b60405180910390f35b3480156102f557600080fd5b50610310600480360381019061030b91906110d4565b610935565b60405161031d919061112f565b60405180910390f35b61032e610396565b005b34801561033c57600080fd5b50610357600480360381019061035291906112e4565b610a49565b005b34801561036557600080fd5b50610380600480360381019061037b9190611386565b610d42565b60405161038d9190611159565b60405180910390f35b6103a03334610d67565b565b600080546103af906113f5565b80601f01602080910402602001604051908101604052809291908181526020018280546103db906113f5565b80156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105109190611159565b60405180910390a36001905092915050565b60025481565b600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461065e5782816105dd9190611455565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106ad9190611455565b9250508190555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161075e9190611159565b60405180910390a360019150509392505050565b61077c3382610dd1565b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040516107c29190611159565b60405180910390a26107f3813373ffffffffffffffffffffffffffffffffffffffff16610ea190919063ffffffff16565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000046146108505761084b610ef4565b610872565b7f00000000000000000000000000000000000000000000000000000000000000005b905090565b60036020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b600180546108b4906113f5565b80601f01602080910402602001604051908101604052809291908181526020018280546108e0906113f5565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109869190611455565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a379190611159565b60405180910390a36001905092915050565b42841015610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a83906114d5565b60405180910390fd5b60006001610a9861081a565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558b604051602001610b2096959493929190611504565b60405160208183030381529060405280519060200120604051602001610b479291906115dd565b6040516020818303038152906040528051906020012085858560405160008152602001604052604051610b7d9493929190611614565b6020604051602081039080840390855afa158015610b9f573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610c1357508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c49906116a5565b60405180910390fd5b85600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92587604051610d319190611159565b60405180910390a350505050505050565b6004602052816000526040600020602052806000526040600020600091509150505481565b8060026000828254610d7991906116c5565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e209190611455565b9250508190555080600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e959190611159565b60405180910390a35050565b600080600080600085875af1905080610eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee690611767565b60405180910390fd5b505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051610f26919061182a565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc64630604051602001610f65959493929190611841565b60405160208183030381529060405280519060200120905090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fba578082015181840152602081019050610f9f565b83811115610fc9576000848401525b50505050565b6000601f19601f8301169050919050565b6000610feb82610f80565b610ff58185610f8b565b9350611005818560208601610f9c565b61100e81610fcf565b840191505092915050565b600060208201905081810360008301526110338184610fe0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061106b82611040565b9050919050565b61107b81611060565b811461108657600080fd5b50565b60008135905061109881611072565b92915050565b6000819050919050565b6110b18161109e565b81146110bc57600080fd5b50565b6000813590506110ce816110a8565b92915050565b600080604083850312156110eb576110ea61103b565b5b60006110f985828601611089565b925050602061110a858286016110bf565b9150509250929050565b60008115159050919050565b61112981611114565b82525050565b60006020820190506111446000830184611120565b92915050565b6111538161109e565b82525050565b600060208201905061116e600083018461114a565b92915050565b60008060006060848603121561118d5761118c61103b565b5b600061119b86828701611089565b93505060206111ac86828701611089565b92505060406111bd868287016110bf565b9150509250925092565b6000602082840312156111dd576111dc61103b565b5b60006111eb848285016110bf565b91505092915050565b600060ff82169050919050565b61120a816111f4565b82525050565b60006020820190506112256000830184611201565b92915050565b6000819050919050565b61123e8161122b565b82525050565b60006020820190506112596000830184611235565b92915050565b6000602082840312156112755761127461103b565b5b600061128384828501611089565b91505092915050565b611295816111f4565b81146112a057600080fd5b50565b6000813590506112b28161128c565b92915050565b6112c18161122b565b81146112cc57600080fd5b50565b6000813590506112de816112b8565b92915050565b600080600080600080600060e0888a0312156113035761130261103b565b5b60006113118a828b01611089565b97505060206113228a828b01611089565b96505060406113338a828b016110bf565b95505060606113448a828b016110bf565b94505060806113558a828b016112a3565b93505060a06113668a828b016112cf565b92505060c06113778a828b016112cf565b91505092959891949750929550565b6000806040838503121561139d5761139c61103b565b5b60006113ab85828601611089565b92505060206113bc85828601611089565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061140d57607f821691505b6020821081036114205761141f6113c6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114608261109e565b915061146b8361109e565b92508282101561147e5761147d611426565b5b828203905092915050565b7f5045524d49545f444541444c494e455f45585049524544000000000000000000600082015250565b60006114bf601783610f8b565b91506114ca82611489565b602082019050919050565b600060208201905081810360008301526114ee816114b2565b9050919050565b6114fe81611060565b82525050565b600060c0820190506115196000830189611235565b61152660208301886114f5565b61153360408301876114f5565b611540606083018661114a565b61154d608083018561114a565b61155a60a083018461114a565b979650505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006115a6600283611565565b91506115b182611570565b600282019050919050565b6000819050919050565b6115d76115d28261122b565b6115bc565b82525050565b60006115e882611599565b91506115f482856115c6565b60208201915061160482846115c6565b6020820191508190509392505050565b60006080820190506116296000830187611235565b6116366020830186611201565b6116436040830185611235565b6116506060830184611235565b95945050505050565b7f494e56414c49445f5349474e4552000000000000000000000000000000000000600082015250565b600061168f600e83610f8b565b915061169a82611659565b602082019050919050565b600060208201905081810360008301526116be81611682565b9050919050565b60006116d08261109e565b91506116db8361109e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117105761170f611426565b5b828201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000611751601383610f8b565b915061175c8261171b565b602082019050919050565b6000602082019050818103600083015261178081611744565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546117b4816113f5565b6117be8186611787565b945060018216600081146117d957600181146117ee57611821565b60ff1983168652811515820286019350611821565b6117f785611792565b60005b83811015611819578154818901526001820191506020810190506117fa565b838801955050505b50505092915050565b600061183682846117a7565b915081905092915050565b600060a0820190506118566000830188611235565b6118636020830187611235565b6118706040830186611235565b61187d606083018561114a565b61188a60808301846114f5565b969550505050505056fea26469706673582212203fb1b7135a6cd0c36f0f125c4312ee251b45c02c61d5295dfaf5fc67b3a34a8664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23282,
        "contract": "src/WFIL.sol:WFIL",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 23284,
        "contract": "src/WFIL.sol:WFIL",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 23288,
        "contract": "src/WFIL.sol:WFIL",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23292,
        "contract": "src/WFIL.sol:WFIL",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23298,
        "contract": "src/WFIL.sol:WFIL",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23306,
        "contract": "src/WFIL.sol:WFIL",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}