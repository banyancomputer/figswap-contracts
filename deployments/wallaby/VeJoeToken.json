{
  "address": "0x44081C0ce0812767cA97D2CAb10d713C2c03E2Cc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "boostedMasterChef",
          "type": "address"
        }
      ],
      "name": "UpdateBoostedMasterChefJoe",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostedMasterChef",
      "outputs": [
        {
          "internalType": "contract IBoostedMasterChefJoe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boostedMasterChef",
          "type": "address"
        }
      ],
      "name": "setBoostedMasterChefJoe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3c5cb2dfea13c4a58ba86abe1ba398e2e77fcdba76a95292595cd4c555b32fb",
  "receipt": {
    "to": null,
    "from": "0x42C930A33280a7218bc924732d67dd84D6247Af4",
    "contractAddress": "0x44081C0ce0812767cA97D2CAb10d713C2c03E2Cc",
    "transactionIndex": 0,
    "gasUsed": "35875260",
    "logsBloom": "0x00",
    "blockHash": "0x879dac57b163f6df9dafe08a7a0bdac12cdb40772345a5fc2f447a09c2d5736c",
    "transactionHash": "0xc3c5cb2dfea13c4a58ba86abe1ba398e2e77fcdba76a95292595cd4c555b32fb",
    "logs": [],
    "blockNumber": 64675,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c4ed98a230405a25ba28e636eb4508fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boostedMasterChef\",\"type\":\"address\"}],\"name\":\"UpdateBoostedMasterChefJoe\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostedMasterChef\",\"outputs\":[{\"internalType\":\"contract IBoostedMasterChefJoe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boostedMasterChef\",\"type\":\"address\"}],\"name\":\"setBoostedMasterChefJoe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `_amount` tokens from `_from`. Callable only by the owner (VeJoeStaking)\",\"params\":{\"_amount\":\"The amount to be burned\",\"_from\":\"The address that will burn tokens\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"mint(address,uint256)\":{\"details\":\"Creates `_amount` token to `_to`. Must only be called by the owner (VeJoeStaking)\",\"params\":{\"_amount\":\"The amount to be minted\",\"_to\":\"The address that will receive the mint\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBoostedMasterChefJoe(address)\":{\"details\":\"Sets the address of the master chef contract this updates\",\"params\":{\"_boostedMasterChef\":\"the address of BoostedMasterChefJoe\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vote Escrow Joe Token - veJOE\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"boostedMasterChef()\":{\"notice\":\"the BoostedMasterChefJoe contract\"}},\"notice\":\"Infinite supply, used to receive extra farming yields and voting power\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src-tokens/VeJoeToken.sol\":\"VeJoeToken\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363638363839313937313036\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib-tokens/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        // emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc0288678abe74c6290951ff2a2e38fbcbf86cd6011fe2252ba60d6b8e6cec336\",\"license\":\"MIT\"},\"lib-tokens/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src-tokens/VeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"lib-tokens/openzeppelin-contracts/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./interfaces/IVeERC20.sol\\\";\\n\\n/// @title VeERC20\\n/// @notice Modified version of ERC20 where transfers and allowances are disabled.\\n/// @dev Only minting and burning are allowed. The hook `_beforeTokenOperation` and\\n/// `_afterTokenOperation` methods are called before and after minting/burning respectively.\\ncontract VeERC20 is Context, IVeERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /// @dev Emitted when `value` tokens are burned and minted\\n    event Burn(address indexed account, uint256 value);\\n    event Mint(address indexed beneficiary, uint256 value);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenOperation(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Mint(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenOperation(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Burn(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any minting and burning.\\n     * @param from the account transferring tokens\\n     * @param to the account receiving tokens\\n     * @param amount the amount being minted or burned\\n     */\\n    function _beforeTokenOperation(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting and burning.\\n     * @param account the account being affected\\n     * @param newBalance the new balance of `account` after minting/burning\\n     */\\n    function _afterTokenOperation(address account, uint256 newBalance) internal virtual {}\\n}\\n\",\"keccak256\":\"0x32fb243c33eb0f9141ab98379da617e1e50e56316ab52683781a384ca4e12902\",\"license\":\"MIT\"},\"src-tokens/VeJoeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"lib-tokens/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./VeERC20.sol\\\";\\n\\ninterface IBoostedMasterChefJoe {\\n    function updateFactor(address, uint256) external;\\n}\\n\\n/// @title Vote Escrow Joe Token - veJOE\\n/// @author Trader Joe\\n/// @notice Infinite supply, used to receive extra farming yields and voting power\\ncontract VeJoeToken is VeERC20(\\\"VeJoeToken\\\", \\\"veJOE\\\"), Ownable {\\n    /// @notice the BoostedMasterChefJoe contract\\n    IBoostedMasterChefJoe public boostedMasterChef;\\n\\n    event UpdateBoostedMasterChefJoe(address indexed user, address boostedMasterChef);\\n\\n    /// @dev Creates `_amount` token to `_to`. Must only be called by the owner (VeJoeStaking)\\n    /// @param _to The address that will receive the mint\\n    /// @param _amount The amount to be minted\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @dev Destroys `_amount` tokens from `_from`. Callable only by the owner (VeJoeStaking)\\n    /// @param _from The address that will burn tokens\\n    /// @param _amount The amount to be burned\\n    function burnFrom(address _from, uint256 _amount) external onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    /// @dev Sets the address of the master chef contract this updates\\n    /// @param _boostedMasterChef the address of BoostedMasterChefJoe\\n    function setBoostedMasterChefJoe(address _boostedMasterChef) external onlyOwner {\\n        // We allow 0 address here if we want to disable the callback operations\\n        boostedMasterChef = IBoostedMasterChefJoe(_boostedMasterChef);\\n\\n        emit UpdateBoostedMasterChefJoe(_msgSender(), _boostedMasterChef);\\n    }\\n\\n    function _afterTokenOperation(address _account, uint256 _newBalance) internal override {\\n        if (address(boostedMasterChef) != address(0)) {\\n            boostedMasterChef.updateFactor(_account, _newBalance);\\n        }\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {\\n        revert(\\\"VeJoeToken: Cannot renounce, can only transfer ownership\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x63a246891ca37e38b3911897a11fcdd49b9d936ec5c8c0ed33684498d7d7c38f\",\"license\":\"MIT\"},\"src-tokens/interfaces/IVeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/// @title Vote Escrow ERC20 Token Interface\\n/// @author Trader Joe\\n/// @notice Interface of a ERC20 token used for vote escrow. Notice that transfers and\\n/// allowances are disabled\\ninterface IVeERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa8959dd3601de986fc487414708f3f3eda9829b283ab85bd1507f6a3c02590e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f56654a6f65546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f76654a4f4500000000000000000000000000000000000000000000000000000081525081600290816200008f9190620003b8565b508060039081620000a19190620003b8565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b6200049f565b600033905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001c057607f821691505b602082108103620001d657620001d562000178565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000201565b6200024c868362000201565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000299620002936200028d8462000264565b6200026e565b62000264565b9050919050565b6000819050919050565b620002b58362000278565b620002cd620002c482620002a0565b8484546200020e565b825550505050565b600090565b620002e4620002d5565b620002f1818484620002aa565b505050565b5b8181101562000319576200030d600082620002da565b600181019050620002f7565b5050565b601f82111562000368576200033281620001dc565b6200033d84620001f1565b810160208510156200034d578190505b620003656200035c85620001f1565b830182620002f6565b50505b505050565b600082821c905092915050565b60006200038d600019846008026200036d565b1980831691505092915050565b6000620003a883836200037a565b9150826002028217905092915050565b620003c3826200013e565b67ffffffffffffffff811115620003df57620003de62000149565b5b620003eb8254620001a7565b620003f88282856200031d565b600060209050601f8311600181146200043057600084156200041b578287015190505b6200042785826200039a565b86555062000497565b601f1984166200044086620001dc565b60005b828110156200046a5784890151825560018201915060208501945060208101905062000443565b868310156200048a578489015162000486601f8916826200037a565b8355505b6001600288020188555050505b505050505050565b61123e80620004af6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a61461017b57806379cc6790146101855780638da5cb5b146101a157806395d89b41146101bf578063f2fde38b146101dd578063f605cbb1146101f9576100b4565b806306fdde03146100b957806318160ddd146100d7578063313ce567146100f557806340c10f191461011357806348a2e46b1461012f57806370a082311461014b575b600080fd5b6100c1610217565b6040516100ce9190610b79565b60405180910390f35b6100df6102a9565b6040516100ec9190610bb4565b60405180910390f35b6100fd6102b3565b60405161010a9190610beb565b60405180910390f35b61012d60048036038101906101289190610c95565b6102bc565b005b61014960048036038101906101449190610cd5565b6102d2565b005b61016560048036038101906101609190610cd5565b610373565b6040516101729190610bb4565b60405180910390f35b6101836103bb565b005b61019f600480360381019061019a9190610c95565b6103fe565b005b6101a9610414565b6040516101b69190610d11565b60405180910390f35b6101c761043e565b6040516101d49190610b79565b60405180910390f35b6101f760048036038101906101f29190610cd5565b6104d0565b005b610201610553565b60405161020e9190610d8b565b60405180910390f35b60606002805461022690610dd5565b80601f016020809104026020016040519081016040528092919081815260200182805461025290610dd5565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b5050505050905090565b6000600154905090565b60006012905090565b6102c4610579565b6102ce82826105f7565b5050565b6102da610579565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061032361077a565b73ffffffffffffffffffffffffffffffffffffffff167fc88bf940839a2f0533c7483ae3f460cf9cbdf750a8c43ed6fd4d98243c202ea2826040516103689190610d11565b60405180910390a250565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103c3610579565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f590610e78565b60405180910390fd5b610406610579565b6104108282610782565b5050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606003805461044d90610dd5565b80601f016020809104026020016040519081016040528092919081815260200182805461047990610dd5565b80156104c65780601f1061049b576101008083540402835291602001916104c6565b820191906000526020600020905b8154815290600101906020018083116104a957829003601f168201915b5050505050905090565b6104d8610579565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610f0a565b60405180910390fd5b61055081610985565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61058161077a565b73ffffffffffffffffffffffffffffffffffffffff1661059f610414565b73ffffffffffffffffffffffffffffffffffffffff16146105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610f76565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d90610fe2565b60405180910390fd5b610672600083836109f1565b80600160008282546106849190611031565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106d99190611031565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040516107269190610bb4565b60405180910390a2610776826000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109f6565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e8906110f9565b60405180910390fd5b6107fd826000836109f1565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a9061118b565b60405180910390fd5b818161088f91906111ab565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008282546108e391906111ab565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040516109309190610bb4565b60405180910390a2610980836000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109f6565b505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610adc57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f00a93e83836040518363ffffffff1660e01b8152600401610aa99291906111df565b600060405180830381600087803b158015610ac357600080fd5b505af1158015610ad7573d6000803e3d6000fd5b505050505b5050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b1a578082015181840152602081019050610aff565b83811115610b29576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b4b82610ae0565b610b558185610aeb565b9350610b65818560208601610afc565b610b6e81610b2f565b840191505092915050565b60006020820190508181036000830152610b938184610b40565b905092915050565b6000819050919050565b610bae81610b9b565b82525050565b6000602082019050610bc96000830184610ba5565b92915050565b600060ff82169050919050565b610be581610bcf565b82525050565b6000602082019050610c006000830184610bdc565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c3682610c0b565b9050919050565b610c4681610c2b565b8114610c5157600080fd5b50565b600081359050610c6381610c3d565b92915050565b610c7281610b9b565b8114610c7d57600080fd5b50565b600081359050610c8f81610c69565b92915050565b60008060408385031215610cac57610cab610c06565b5b6000610cba85828601610c54565b9250506020610ccb85828601610c80565b9150509250929050565b600060208284031215610ceb57610cea610c06565b5b6000610cf984828501610c54565b91505092915050565b610d0b81610c2b565b82525050565b6000602082019050610d266000830184610d02565b92915050565b6000819050919050565b6000610d51610d4c610d4784610c0b565b610d2c565b610c0b565b9050919050565b6000610d6382610d36565b9050919050565b6000610d7582610d58565b9050919050565b610d8581610d6a565b82525050565b6000602082019050610da06000830184610d7c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ded57607f821691505b602082108103610e0057610dff610da6565b5b50919050565b7f56654a6f65546f6b656e3a2043616e6e6f742072656e6f756e63652c2063616e60008201527f206f6e6c79207472616e73666572206f776e6572736869700000000000000000602082015250565b6000610e62603883610aeb565b9150610e6d82610e06565b604082019050919050565b60006020820190508181036000830152610e9181610e55565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ef4602683610aeb565b9150610eff82610e98565b604082019050919050565b60006020820190508181036000830152610f2381610ee7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f60602083610aeb565b9150610f6b82610f2a565b602082019050919050565b60006020820190508181036000830152610f8f81610f53565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000610fcc601f83610aeb565b9150610fd782610f96565b602082019050919050565b60006020820190508181036000830152610ffb81610fbf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061103c82610b9b565b915061104783610b9b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561107c5761107b611002565b5b828201905092915050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006110e3602183610aeb565b91506110ee82611087565b604082019050919050565b60006020820190508181036000830152611112816110d6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611175602283610aeb565b915061118082611119565b604082019050919050565b600060208201905081810360008301526111a481611168565b9050919050565b60006111b682610b9b565b91506111c183610b9b565b9250828210156111d4576111d3611002565b5b828203905092915050565b60006040820190506111f46000830185610d02565b6112016020830184610ba5565b939250505056fea2646970667358221220005cfdd13829fc7c520d5566ab34508fdc5dffa32fd9b01d07a1b66a0871b86c64736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `_amount` tokens from `_from`. Callable only by the owner (VeJoeStaking)",
        "params": {
          "_amount": "The amount to be burned",
          "_from": "The address that will burn tokens"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "mint(address,uint256)": {
        "details": "Creates `_amount` token to `_to`. Must only be called by the owner (VeJoeStaking)",
        "params": {
          "_amount": "The amount to be minted",
          "_to": "The address that will receive the mint"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBoostedMasterChefJoe(address)": {
        "details": "Sets the address of the master chef contract this updates",
        "params": {
          "_boostedMasterChef": "the address of BoostedMasterChefJoe"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vote Escrow Joe Token - veJOE",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "boostedMasterChef()": {
        "notice": "the BoostedMasterChefJoe contract"
      }
    },
    "notice": "Infinite supply, used to receive extra farming yields and voting power",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25729,
        "contract": "src-tokens/VeJoeToken.sol:VeJoeToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25731,
        "contract": "src-tokens/VeJoeToken.sol:VeJoeToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 25733,
        "contract": "src-tokens/VeJoeToken.sol:VeJoeToken",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 25735,
        "contract": "src-tokens/VeJoeToken.sol:VeJoeToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 23234,
        "contract": "src-tokens/VeJoeToken.sol:VeJoeToken",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 25975,
        "contract": "src-tokens/VeJoeToken.sol:VeJoeToken",
        "label": "boostedMasterChef",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBoostedMasterChefJoe)25964"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBoostedMasterChefJoe)25964": {
        "encoding": "inplace",
        "label": "contract IBoostedMasterChefJoe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}